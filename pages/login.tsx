import Head from "next/head";
import dynamic from "next/dynamic";
import { useRouter } from "next/router";
import React, { useContext, useEffect } from "react";
import { useForm } from "react-hook-form";
import { NextPage } from "next";

import Header from "../components/Header";
import { NotificationContext } from "../contexts/NotificationContext";
import { axios } from "../lib/axios";
import useStorage from "../hook/useStorage";
import {
  Button,
  Container,
  FormControl,
  FormLabel,
  Input,
} from "@chakra-ui/react";

interface LoginInfo {
  email?: string;
  password?: string;
}

const Login: NextPage = () => {
  const { setNotification } = useContext(NotificationContext);
  const { setItem } = useStorage();
  const router = useRouter();
  const { register, handleSubmit } = useForm<LoginInfo>();

  useEffect((): void => {
    if (router.query?.message === "true") {
      setNotification({
        type: "warning",
        body: "ログインしてください",
      });
    }
  }, [router.query?.message, setNotification]);

  const onSubmit = (values: LoginInfo) => {
    const body = JSON.stringify({
      email: values.email,
      password: values.password,
    });
    axios
      .post(`/users/login`, body)
      .then((res) => {
        if (res.data.token) {
          setItem("token", res.data.token);
          setItem("id", res.data.user.id);
          setNotification({
            type: "success",
            body: "ログインに成功しました",
          });
          router.push({
            pathname: "/",
          });
          return;
        } else {
          setNotification({
            type: "error",
            body: "エラーが発生しました。もう一度試してください",
          });
          return;
        }
      })
      .catch(() => {
        setNotification({
          type: "error",
          body: "メールアドレスまたはパスワードが違います",
        });
        return;
      });
  };

  return (
    <>
      <Head>
        <title>login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Container>
        <form onSubmit={handleSubmit(onSubmit)}>
          <FormControl>
            <FormLabel htmlFor="email">メールアドレス</FormLabel>
            <Input type="email" {...register("email", { required: true })} />
          </FormControl>

          <FormControl>
            <FormLabel htmlFor="password">パスワード</FormLabel>
            <Input
              type="password"
              {...register("password", { required: true })}
            />
          </FormControl>

          <Button type="submit" variant="solid" isLoading={false}>
            ログイン
          </Button>
        </form>
      </Container>
    </>
  );
};

const DynamicLogin = dynamic(
  {
    loader: async () => Login,
  },
  { ssr: false }
);

export default DynamicLogin;
